// import './App.css';
// import styles from '../styles/Home.module.css';
// import * as React from 'react';
import Map, {
  Marker,
  Popup,
  GeolocateControl,
  FullscreenControl,
  NavigationControl,
  ScaleControl,
} from 'react-map-gl';
import { useState, useEffect } from 'react';
import 'mapbox-gl/dist/mapbox-gl.css';
import axios from 'axios';
// import parse from 'html-react-parser';
import { Room, AcUnit, Star } from '@material-ui/icons';
// import { format } from 'timeago.js';
import Register from './components/Register';
import Login from './components/Login';

function Home() {
  // const currentUsername = 'Jo';
  // const MAPBOX_TOKEN = process.env.MapboxAccessToken;
  // const MAPBOX_TOKEN = process.env.MAPBOX_ACCESS_TOKEN;
  const MAPBOX_TOKEN =
    'pk.eyJ1Ijoicm9zYWNyb2NlIiwiYSI6ImNrenU1eThxZzRzOTAybm55NWU0Y2JvNnQifQ.8-Iz1krxCOtnbCx0iBkBEg';
  const [viewport, setViewport] = useState({
    latitude: 45,
    longitude: 15,
    zoom: 4,
  });
  const myStorage = window.localStorage;
  const [currentUsername, setCurrentUsername] = useState(
    myStorage.getItem('user')
  );
  // const [showPopup, setShowPopup] = useState(true);
  const [pins, setPins] = useState([]);
  const [currentPlaceId, setCurrentPlaceId] = useState(null);
  const [newPlace, setNewPlace] = useState(null);
  const [title, setTitle] = useState(null);
  const [desc, setDesc] = useState(null);
  const [star, setStar] = useState(0);
  const [showRegister, setShowRegister] = useState(false);
  const [showLogin, setShowLogin] = useState(false);

  const [typeACheck, setTypeACheck] = useState(true);
  const [typeBCheck, setTypeBCheck] = useState(true);

  const handleMarkerClick = (id, lat, long) => {
    setCurrentPlaceId(id);
    setViewport({ ...viewport, latitude: lat, longitude: long });
  };

  const handleAddClick = (e) => {
    console.log(e.lngLat);
    const longitude = e.lngLat.lng;
    const latitude = e.lngLat.lat;
    // console.log([longitude, latitude]);
    setViewport({ ...viewport, latitude: latitude, longitude: longitude });
    setNewPlace({
      lat: latitude,
      long: longitude,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const newPin = {
      username: currentUsername,
      title,
      desc,
      // rating: star,
      lat: newPlace.lat,
      long: newPlace.long,
      type: 'A',
    };

    try {
      const res = await axios.post('/pins', newPin);
      setPins([...pins, res.data]);
      setNewPlace(null);
    } catch (err) {
      console.log(err);
    }
  };

  const handleLogout = () => {
    setCurrentUsername(null);
    myStorage.removeItem('user');
  };

  const handleTypeAChange = () => {
    setTypeACheck(!typeACheck);
  };

  const handleTypeBChange = () => {
    setTypeBCheck(!typeBCheck);
  };

  useEffect(() => {
    const getPins = async () => {
      try {
        const allPins = await axios.get(
          `${process.env.NEXT_PUBLIC_API}/events`
        );
        setPins(allPins.data);
      } catch (err) {
        console.log(err);
      }
    };
    getPins();
  }, []);

  return (
    <div>
      <Map
        {...viewport}
        // initialViewState={{
        //   latitude: 45,
        //   longitude: 15,
        //   zoom: 4,
        // }}
        style={{ width: '100vw', height: '100vh' }}
        mapStyle="mapbox://styles/mapbox/streets-v11"
        // transitionDuration="1000"
        mapboxAccessToken={MAPBOX_TOKEN}
        onMove={(evt) => setViewport(evt.viewState)}
        onDblClick={currentUsername && handleAddClick}
      >
        <GeolocateControl />
        <FullscreenControl />
        <NavigationControl />
        <ScaleControl />
        {pins.map((p) => (
          <>
            {/* <Marker
              key={p._id}
              longitude={p.long}
              latitude={p.lat}
              offsetLeft={-3.5 * viewport.zoom}
              offsetTop={-7 * viewport.zoom}
            > */}
            {/* <parse({p.icon}) style={{ fontSize: viewport.zoom * 5, color: 'red' }} /> */}

            {p.type === 'a' && typeACheck && (
              <Marker
                key={p._id}
                longitude={p.long}
                latitude={p.lat}
                offsetLeft={-3.5 * viewport.zoom}
                offsetTop={-7 * viewport.zoom}
                // anchor="bottom"
              >
                <AcUnit
                  className="markerAcUnit"
                  style={{ fontSize: viewport.zoom * 5 }}
                  onClick={() => handleMarkerClick(p._id, p.lat, p.long)}
                  // onMouseEnter={() => handleMarkerClick(p._id, p.lat, p.long)}
                />
              </Marker>
            )}

            {p.type === 'b' && typeBCheck && (
              <Marker
                key={p._id}
                longitude={p.long}
                latitude={p.lat}
                offsetLeft={-3.5 * viewport.zoom}
                offsetTop={-7 * viewport.zoom}
                // anchor="bottom"
              >
                <Room
                  className="markerRoom"
                  style={{ fontSize: viewport.zoom * 5 }}
                  onClick={() => handleMarkerClick(p._id, p.lat, p.long)}
                  // onMouseEnter={() => handleMarkerClick(p._id, p.lat, p.long)}
                />
              </Marker>
            )}
            {/* </Marker> */}
            {p._id === currentPlaceId && (
              <Popup
                longitude={p.long}
                latitude={p.lat}
                anchor="left"
                // onClose={() => setCurrentPlaceId(null)}
                // onClose={() => setShowPopup(false)}
              >
                <div className="card">
                  <label>Place</label>
                  <h4 className="place">{p.title}</h4>
                  <label>Review</label>
                  <p className="desc">{p.desc}</p>
                  <label>Rating</label>
                  <div className="stars">
                    {Array(p.rating).fill(<Star className="star" />)}
                  </div>
                  <label>Information</label>
                  <span className="username">
                    Created by <b>{p.username}</b>
                  </span>
                  {/* <span className="date">{format(p.createdAt)}</span> */}
                </div>
              </Popup>
            )}
          </>
        ))}

        {newPlace && (
          <>
            <Popup
              longitude={newPlace.long}
              latitude={newPlace.lat}
              anchor="left"
              onClose={() => setNewPlace(null)}
              // onClose={() => setShowPopup(false)}
            >
              <div>
                <form onSubmit={handleSubmit}>
                  <label>Title</label>
                  <input
                    placeholder="Enter a title"
                    autoFocus
                    onChange={(e) => setTitle(e.target.value)}
                  />
                  <label>Description</label>
                  <textarea
                    placeholder="Say us something about this place."
                    onChange={(e) => setDesc(e.target.value)}
                  />
                  <label>Rating</label>
                  <select onChange={(e) => setStar(e.target.value)}>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                  </select>
                  <button type="submit" className="submitButton">
                    Add Pin
                  </button>
                </form>
              </div>
            </Popup>
          </>
        )}
        {currentUsername ? (
          <button className="button logout" onClick={handleLogout}>
            Log out
          </button>
        ) : (
          <div className="buttons">
            <button className="button login" onClick={() => setShowLogin(true)}>
              Log in
            </button>
            <button
              className="button register"
              onClick={() => setShowRegister(true)}
            >
              Register
            </button>
          </div>
        )}

        {showRegister && <Register setShowRegister={setShowRegister} />}
        {showLogin && (
          <Login
            setShowLogin={setShowLogin}
            setCurrentUsername={setCurrentUsername}
            myStorage={myStorage}
          />
        )}

        <div id="filter-group" className="filter-group">
          <div>
            <input
              type="checkbox"
              id="typeA"
              name="typeA"
              defaultChecked
              onChange={handleTypeAChange}
            />
            <label for="typeA">Type A</label>
          </div>
          <div>
            <input
              type="checkbox"
              id="typeB"
              name="typeB"
              defaultChecked
              onChange={handleTypeBChange}
            />
            <label for="typeB">Type B</label>
          </div>
        </div>
      </Map>
    </div>
  );
}

export default Home;

// const Home = () => {
//   return (
//     <div className="container">
//       <div className="row">
//         <div className="column">
//           <h1 className="display-1 text-center py-5">giroq</h1>
//           {/* {JSON.stringify(state)} */}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default Home;
